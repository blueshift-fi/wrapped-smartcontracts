/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { Actor, ActorInterface } from "../Actor";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "_mainchainAddress",
        type: "string",
      },
      {
        internalType: "enum L1Type",
        name: "_l1Type",
        type: "uint8",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bool",
        name: "success",
        type: "bool",
      },
    ],
    name: "Response",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "key",
        type: "bytes",
      },
    ],
    name: "execute",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "mainchainAddress",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "nonce",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162000e9b38038062000e9b833981016040819052620000349162000104565b60008251116200008a5760405162461bcd60e51b815260206004820152601960248201527f496e76616c6964206d61696e636861696e206164647265737300000000000000604482015260640160405180910390fd5b60016200009883826200027b565b506003805482919060ff191660018381811115620000ba57620000ba62000347565b021790555050600080546001600160a01b03191633179055506200035d565b634e487b7160e01b600052604160045260246000fd5b805160028110620000ff57600080fd5b919050565b600080604083850312156200011857600080fd5b82516001600160401b03808211156200013057600080fd5b818501915085601f8301126200014557600080fd5b8151818111156200015a576200015a620000d9565b604051601f8201601f19908116603f01168101908382118183101715620001855762000185620000d9565b81604052828152602093508884848701011115620001a257600080fd5b600091505b82821015620001c65784820184015181830185015290830190620001a7565b6000848483010152809650505050620001e1818601620000ef565b925050509250929050565b600181811c908216806200020157607f821691505b6020821081036200022257634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200027657600081815260208120601f850160051c81016020861015620002515750805b601f850160051c820191505b8181101562000272578281556001016200025d565b5050505b505050565b81516001600160401b03811115620002975762000297620000d9565b620002af81620002a88454620001ec565b8462000228565b602080601f831160018114620002e75760008415620002ce5750858301515b600019600386901b1c1916600185901b17855562000272565b600085815260208120601f198616915b828110156200031857888601518255948401946001909101908401620002f7565b5085821015620003375787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052602160045260246000fd5b610b2e806200036d6000396000f3fe6080604052600436106100385760003560e01c80631f6a1eb914610044578063affed0e014610066578063d75b501c1461008f57600080fd5b3661003f57005b600080fd5b34801561005057600080fd5b5061006461005f36600461069f565b6100b1565b005b34801561007257600080fd5b5061007c60025481565b6040519081526020015b60405180910390f35b34801561009b57600080fd5b506100a461052b565b604051610086919061072f565b6002541580156100cb57506000546001600160a01b031633145b806100d557503332145b6101265760405162461bcd60e51b815260206004820152601f60248201527f4f6e6c7920666163746f7279206f7220454f412063616e20657865637574650060448201526064015b60405180910390fd5b60006101306105b9565b9050600061013c6105f1565b9050600061014a8284610778565b600354604051632f0853a360e01b81529192506000918291606791632f0853a3916101889160ff909116908d908d908d908d906001906004016107ee565b600060405180830381865afa1580156101a5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526101cd919081019061098c565b915091508161021e5760405162461bcd60e51b815260206004820152601d60248201527f5369676e617475726520766572696669636174696f6e206661696c6564000000604482015260640161011d565b60008060008060008060008780602001905181019061023d91906109fe565b9650965096509650965096509650306001600160a01b0316876001600160a01b03161461029c5760405162461bcd60e51b815260206004820152600d60248201526c08ce4deda40dad2e6dac2e8c6d609b1b604482015260640161011d565b898314806102b457506002541580156102b457508b83145b6102f55760405162461bcd60e51b815260206004820152601260248201527108ec2e640d8d2dad2e840dad2e6dac2e8c6d60731b604482015260640161011d565b3a82146103395760405162461bcd60e51b815260206004820152601260248201527108ec2e640e0e4d2c6ca40dad2e6dac2e8c6d60731b604482015260640161011d565b6001600160a01b03851661038f5760405162461bcd60e51b815260206004820152601960248201527f546f20616464726573732063616e6e6f74206265207a65726f00000000000000604482015260640161011d565b60025486146103d15760405162461bcd60e51b815260206004820152600e60248201526d09cdedcc6ca40dad2e6dac2e8c6d60931b604482015260640161011d565b600280549060006103e183610a83565b91905055506000856001600160a01b031685613a985a6104019190610a9c565b90846040516104109190610aaf565b600060405180830381858888f193505050503d806000811461044e576040519150601f19603f3d011682016040523d82523d6000602084013e610453565b606091505b505090507fb6caad5b328a3de9a49b44605241a4b72f6f1aa955829d12e37decfd84a0b8ca8160405161048a911515815260200190565b60405180910390a1600060ec611a905a6104a4908f610a9c565b6104ae9190610778565b6104b89190610778565b90506000326104c73a84610acb565b604051600081818185875af1925050503d8060008114610503576040519150601f19603f3d011682016040523d82523d6000602084013e610508565b606091505b505090508061051657600080fd5b50505050505050505050505050505050505050565b60018054610538906107ba565b80601f0160208091040260200160405190810160405280929190818152602001828054610564906107ba565b80156105b15780601f10610586576101008083540402835291602001916105b1565b820191906000526020600020905b81548152906001019060200180831161059457829003601f168201915b505050505081565b7f0dca280ea3ca230b21284a5a56a2293bf036acd4796ead208ee9bbec18cead2780546000916105ea600283610778565b9250505090565b6000615208815b36811015610650576000368281811061061357610613610ae2565b909101356001600160f81b03191615905061062f576010610632565b60045b61063c9083610778565b91508061064881610a83565b9150506105f8565b50919050565b60008083601f84011261066857600080fd5b50813567ffffffffffffffff81111561068057600080fd5b60208301915083602082850101111561069857600080fd5b9250929050565b600080600080604085870312156106b557600080fd5b843567ffffffffffffffff808211156106cd57600080fd5b6106d988838901610656565b909650945060208701359150808211156106f257600080fd5b506106ff87828801610656565b95989497509550505050565b60005b8381101561072657818101518382015260200161070e565b50506000910152565b602081526000825180602084015261074e81604085016020870161070b565b601f01601f19169190910160400192915050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561078b5761078b610762565b92915050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b600181811c908216806107ce57607f821691505b60208210810361065057634e487b7160e01b600052602260045260246000fd5b60006002881061080e57634e487b7160e01b600052602160045260246000fd5b878252602060808184015261082760808401888a610791565b838103604085015261083a818789610791565b905083810360608501526000855481600182811c91508083168061085f57607f831692505b868310810361087c57634e487b7160e01b85526022600452602485fd5b82865260208601955080801561089957600181146108af576108da565b60ff198516875283151560051b870195506108da565b60008b81526020902060005b858110156108d4578154898201529084019089016108bb565b88019650505b50939e9d5050505050505050505050505050565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261091557600080fd5b815167ffffffffffffffff80821115610930576109306108ee565b604051601f8301601f19908116603f01168101908282118183101715610958576109586108ee565b8160405283815286602085880101111561097157600080fd5b61098284602083016020890161070b565b9695505050505050565b6000806040838503121561099f57600080fd5b825180151581146109af57600080fd5b602084015190925067ffffffffffffffff8111156109cc57600080fd5b6109d885828601610904565b9150509250929050565b80516001600160a01b03811681146109f957600080fd5b919050565b600080600080600080600060e0888a031215610a1957600080fd5b610a22886109e2565b965060208801519550610a37604089016109e2565b9450606088015193506080880151925060a0880151915060c088015167ffffffffffffffff811115610a6857600080fd5b610a748a828b01610904565b91505092959891949750929550565b600060018201610a9557610a95610762565b5060010190565b8181038181111561078b5761078b610762565b60008251610ac181846020870161070b565b9190910192915050565b808202811582820484141761078b5761078b610762565b634e487b7160e01b600052603260045260246000fdfea26469706673582212202b89ac7d3fdc5916bd73be26554a3c603b4c3be7350017ded26a28f52f52a55a64736f6c63430008120033";

type ActorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ActorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Actor__factory extends ContractFactory {
  constructor(...args: ActorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _mainchainAddress: PromiseOrValue<string>,
    _l1Type: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Actor> {
    return super.deploy(
      _mainchainAddress,
      _l1Type,
      overrides || {}
    ) as Promise<Actor>;
  }
  override getDeployTransaction(
    _mainchainAddress: PromiseOrValue<string>,
    _l1Type: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _mainchainAddress,
      _l1Type,
      overrides || {}
    );
  }
  override attach(address: string): Actor {
    return super.attach(address) as Actor;
  }
  override connect(signer: Signer): Actor__factory {
    return super.connect(signer) as Actor__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ActorInterface {
    return new utils.Interface(_abi) as ActorInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Actor {
    return new Contract(address, _abi, signerOrProvider) as Actor;
  }
}
